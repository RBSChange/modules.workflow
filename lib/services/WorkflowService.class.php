<?php
/**
 * @package modules.workflow
 */
class workflow_WorkflowService extends f_persistentdocument_DocumentService
{
	/**
	 * @var workflow_WorkflowService
	 */
	private static $instance;

	/**
	 * @return workflow_WorkflowService
	 */
	public static function getInstance()
	{
		if (self::$instance === null)
		{
			self::$instance = self::getServiceClassInstance(get_class());
		}
		return self::$instance;
	}

	/**
	 * @return workflow_persistentdocument_workflow
	 */
	public function getNewDocumentInstance()
	{
		$workflow = $this->getNewDocumentInstanceByModelName('modules_workflow/workflow');
		$wds = workflow_WorkflowDesignerService::getInstance();

		// Automatically add the start place.
		$startPlace = $wds->getNewPlaceInstance();
		$startPlace->setPlacetype(WorkflowHelper::PLACE_TYPE_START);
		$startPlace->setLabel(f_Locale::translate('&modules.workflow.bo.general.AutoGenerated-StartPlace;'));
		$workflow->addPlaces($startPlace);

		// Automatically add the end place.
		$endPlace = $wds->getNewPlaceInstance();
		$endPlace->setPlacetype(WorkflowHelper::PLACE_TYPE_END);
		$endPlace->setLabel(f_Locale::translate('&modules.workflow.bo.general.AutoGenerated-EndPlace;'));
		$workflow->addPlaces($endPlace);

		return $workflow;
	}

	/**
	 * Create a query based on 'modules_workflow/workflow' model
	 * @return f_persistentdocument_criteria_Query
	 */
	public function createQuery()
	{
		return $this->pp->createQuery('modules_workflow/workflow');
	}

	/**
	 * @param workflow_persistentdocument_workflow $document
	 * @return void
	 */
	protected function preDelete($document)
	{
		// Delete all cases associated to the deleted workflow.
		$query = $this->pp->createQuery('modules_workflow/case');
		$query->createCriteria('workflow')->add(Restrictions::eq('id', $document->getId()));
		$casesArray = $this->pp->find($query);
		foreach ($casesArray as $case)
		{
			$case->delete();
		}
	}

	/**
	 * Get the workflow start place.
	 * @param workflow_persistentdocument_workflow $workflow
	 * @return workflow_persistentdocument_place
	 */
	public function getStartPlace($workflow)
	{
		if (Framework::isDebugEnabled())
		{
			Framework::debug(__METHOD__ . ' : start for the workflow ' . $workflow->getId());
		}
		$placesArray = $workflow->getPlacesArray();
		foreach ($placesArray as $place)
		{
			if($place->getPlacetype() == WorkflowHelper::PLACE_TYPE_START)
			{
				return $place;
			}
		}
		return null;
	}

	/**
	 * Get the workflow end place.
	 * @param workflow_persistentdocument_workflow $workflow
	 * @return workflow_persistentdocument_place
	 */
	public function getEndPlace($workflow)
	{
		if (Framework::isDebugEnabled())
		{
			Framework::debug(__METHOD__ . ' : start for the workflow ' . $workflow->getId());
		}
		$placesArray = $workflow->getPlacesArray();
		foreach ($placesArray as $place)
		{
			if($place->getPlacetype() == WorkflowHelper::PLACE_TYPE_END)
			{
				return $place;
			}
		}
		return null;
	}

	/**
	 * Validate this workflow definition.
	 * @param workflow_persistentdocument_workflow $workflow
	 * @return boolean
	 */
	public function validatePath($workflow)
	{
		if (Framework::isDebugEnabled())
		{
			Framework::debug(__METHOD__ . ' : start for the workflow ' . $workflow->getId());
		}
		workflow_WorkflowService::getInstance()->invalidate($workflow);

		// Validate this workflow document.
		$task = $workflow->getStarttaskid();
		$label = $workflow->getLabel();
		if (empty($task) || empty($label))
		{
			$workflow->setErrors(f_Locale::translate('&modules.workflow.bo.general.Error-TaskAndLabelNeeded;'));
			$workflow->save();
			if (Framework::isDebugEnabled())
			{
				Framework::debug(__METHOD__ . ' : ' . $workflow->getErrors());
			}
			return false;
		}

		// Check if there is a start place and a end place.
		if (is_null($this->getStartPlace($workflow)) || is_null($this->getEndPlace($workflow)))
		{
			$workflow->setErrors(f_Locale::translate('&modules.workflow.bo.general.Error-StartAndEndPlacesNeeded;'));
			$workflow->save();
			if (Framework::isDebugEnabled())
			{
				Framework::debug(__METHOD__ . ' : ' . $workflow->getErrors());
			}
			return false;
		}

		// Validate arcs.
		$arcService = workflow_ArcService::getInstance();
		$arcsArray = $workflow->getArcsArray();
		foreach ($arcsArray as $arc)
		{
			if (!$arcService->validatePath($arc))
			{
				return false;
			}
		}

		// Validate places.
		$placeService = workflow_PlaceService::getInstance();
		$placeArray = $workflow->getPlacesArray();
		foreach ($placeArray as $place)
		{
			if (!$placeService->validatePath($place))
			{
				return false;
			}
		}

		// Validate transitions.
		$transitionService = workflow_TransitionService::getInstance();
		$transitionArray = $workflow->getTransitionsArray();
		foreach ($transitionArray as $transition)
		{
			if (!$transitionService->validatePath($transition))
			{
				return false;
			}
		}

		// Test if there is no orther active workflow for this task on the publication interval.
		$task = $workflow->getStarttaskid();
		$startDate = $workflow->getStartpublicationdate();
		$endDate = $workflow->getEndpublicationdate();
		$otherWorkflows = workflow_WorkflowEngineService::getInstance()->execGetActiveWorkflowDefinitions($task, $startDate, $endDate, false, false);
		if (Framework::isDebugEnabled())
		{
			Framework::debug(__METHOD__ . ' : nb other valid workflows = ' . count($otherWorkflows));
		}
		if (count($otherWorkflows) > 0)
		{
			$workflow->setErrors(f_Locale::translate('&modules.workflow.bo.general.Error-AnotherValidWorkflowOnInterval;'));
			$workflow->save();
			if (Framework::isDebugEnabled())
			{
				Framework::debug(__METHOD__ . ' : ' . $workflow->getErrors());
			}
			return false;
		}

		// If we arrive up to here, the workflow is valid.
		$workflow->setPublicationstatus('ACTIVE');
		$workflow->save();
		if (Framework::isDebugEnabled())
		{
			Framework::debug(__METHOD__ . ' : the workflow ' . $workflow->getId() . ' is valid');
		}
		return true;
	}

	/**
	 * Invalidate this workflow definition.
	 * @param workflow_persistentdocument_workflow $workflow
	 * @param string $errors error message to set.
	 * @param boolean $doSave say if we want to save the workflow.
	 */
	public function invalidate($workflow, $errors = null, $doSave = true)
	{
		if (Framework::isDebugEnabled())
		{
			Framework::debug(__METHOD__ . ' : start for the workflow ' . $workflow->getId());
		}
		$workflow->setPublicationstatus('DRAFT');
		$workflow->setErrors(empty($errors) ? "" : $errors);
		if ($doSave)
		{
			$workflow->save();
		}
	}

	/**
	 * Say if this workflow is valid.
	 * @param workflow_persistentdocument_workflow $workflow
	 * @return boolean
	 */
	public function isDefinitionValid($workflow)
	{
		if (Framework::isDebugEnabled())
		{
			Framework::debug(__METHOD__ . ' : start for the workflow ' . $workflow->getId());
		}
		return ($workflow->getPublicationstatus() == 'ACTIVE' || $workflow->isPublicated());
	}

	/**
	 * @param String $startTaskId
	 * @return Boolean
	 */
	public function hasWorkflowStartTaskId($startTaskId)
	{
		$query = $this->createQuery();
		$query->add(Restrictions::eq('starttaskid', $startTaskId));
		$query->setMaxResults(1);
		return count($query->find()) != 0;
	}
}